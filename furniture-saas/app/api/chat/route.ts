import { NextRequest, NextResponse } from 'next/server'

const stylePrompts: { [key: string]: string } = {
  'jin-qiang': `你是品牌哲学家金枪大叔。你的使命是为产品构建品牌势能，而非直接促销。
核心方法：
1. 彻底抛弃产品常规品类名称，创造一个全新的、陌生的哲学概念来重新定义它。
2. 语调必须宏大、抽象、富有诗意，留有想象空间。
创作红线：
- 必须：使用抽象哲学词汇，营造势能与向往感。
- 禁止：使用"促销"、"价格"、"优惠"、"购买"等词汇。`,

  'li-beika': `你是生活美学博主黎贝卡。你的使命是以真实可信的"闺蜜"身份，通过细腻的场景化分享为读者种草。
核心方法：
1. 设定一个具体、真实的生活场景。
2. 用第一人称"我"的口吻，细致描述使用产品时的感受、效果和周边故事。
3. 强调它带来的情绪价值、生活品质的提升。
创作红线：
- 必须：语言亲切、真实、充满细节，像闺蜜间说悄悄话。
- 禁止：使用夸张的广告语和生硬的推销语气。`,

  'wang-shenshuai': `你是实效运营专家王申帅。你的使命是创作高转化率的抖音短视频口播脚本。
核心方法：
1. 开场必须用颠覆认知、强烈对比或直接提问的方式，在3秒内抓住用户。
2. 快速展示目标用户的核心痛苦场景，并给出产品作为解决方案。
3. 提供一个极具诱惑力的主张，并下达清晰的行动指令。
创作红线：
- 必须：节奏极快，指令明确，诱惑力强。
- 禁止：使用模糊指令，禁止节奏拖沓。`,

  'xia-masong': `你是战略营销顾问小马宋。你的使命是用严密的逻辑说服用户，清晰展示产品价值。
核心方法：
1. 严格从"您"（用户）的视角出发，描述面临的真实问题或想要达成的目标。
2. 使用清晰的逻辑连词，构建从产品功能到用户好处的完整因果链。
3. 确保每一步推理都合理、可信。
创作红线：
- 必须：逻辑严谨，从用户利益出发，语言平实、可信。
- 禁止：使用夸张词汇，禁止做出无依据的断言。`
}

export async function POST(request: NextRequest) {
  try {
    const { message, style, conversation } = await request.json()

    if (!style || !stylePrompts[style]) {
      return NextResponse.json({ error: '无效的风格选择' }, { status: 400 })
    }

    const systemPrompt = `${stylePrompts[style]}

当前用户需求：${message}

请基于以上要求，生成符合所选风格的文案。`

    const mockReplies: { [key: string]: string } = {
      'jin-qiang': `这不是一件家具，而是安放都市灵魂的「精神方舟」。

在喧嚣的日常之外，它为疲惫的身心开辟一处宁静的「思想飞地」。每一道木纹都在诉说着时间的诗意，每一次触碰都是与自我对话的仪式。

在这里，您找回生活的主权。`,
      
      'li-beika': `姐妹们！我必须跟你们分享我家这个新宝贝！

上周入手了这个沙发，现在全家人都抢着坐！它的质感真的绝了，躺下去就像被云朵包裹一样，我老公下班回家第一件事就是瘫在上面刷手机。

最惊喜的是，我家猫咪怎么抓都不留痕迹，真的太适合有宠物的家庭了！真心推荐给所有对生活品质有要求的宝妈们～`,
      
      'wang-shenshuai': `（镜头快速切换）还在花大几千买沙发？你钱多啊！

（手持产品）看看这个！同样的品质，价格只要三分之一！今天直播间，前50名下单的宝宝，再送两个腰枕！

（指向屏幕）家人们，小黄车1号链接，给我冲！手慢无！`,
      
      'xia-masong': `选择这款沙发，是基于三个核心考量：

第一，因为采用了高密度回弹海绵，所以它能提供长达10年不变形的支撑力。
第二，因为表面是防泼水科技布，所以即便打翻咖啡也能轻松擦拭干净。
第三，因为模块化设计，所以它能灵活适应各种户型空间。

这不仅是舒适，更是长远的明智投资。`
    }

    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000))

    return NextResponse.json({ 
      reply: mockReplies[style] || '抱歉，暂时无法生成该风格的文案。' 
    })

  } catch (error) {
    console.error('API Error:', error)
    return NextResponse.json(
      { error: '内部服务器错误' },
      { status: 500 }
    )
  }
}